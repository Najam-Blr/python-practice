for element in [1, 2, 3]:
    print(element)
for element in (1, 2, 3):
    print(element)
for key in {'one':1, 'two':2}:
    print(key)
for key, val in {'one':1, 'two':2}.items():
    print(key, val) 
for char in "123":
    print(char)
for line in open("myfile.txt"):
    print(line, end='')
    
'''
Behind the scenes, the for statement calls iter() on the container object. The function returns an iterator object that
defines the method __next__() which accesses elements in the container one at a time. When there are no more elements,
__next__() raises a StopIteration exception which tells the for loop to terminate.
'''


s = 'abc'
it = iter(s)

print(it.__next__()) # you can writ next(it) also 
print(it.__next__())
print(it.__next__())
print(it.__next__()) #it raise stopIteration exception once there is no element to further loop through 


# In oreder to loop through the class objects we need to overload the __iter__ and __next__ method inside the class 

class Reverse():

    def __init__(self, data):
        self.data = data
        self.index = len(data)

    def __iter__(self):
        return self

    def __next__(self):
        if self.index == 0:
            raise StopIteration

        self.index = self.index-1
        return self.data[self.index]

myobj = Reverse("Hello")
it = iter(myobj)

print(it.__next__())
print(it.__next__())
print(it.__next__())
print(it.__next__())
print(it.__next__())

